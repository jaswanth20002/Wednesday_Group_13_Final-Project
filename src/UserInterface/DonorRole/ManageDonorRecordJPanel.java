/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.DonorRole;

import Model.Donor.Donor;
import Model.EcoSystem;
import Model.Enterprise.Enterprise;
import Model.Organization.DoctorOrganization;
import Model.Organization.DonorOrganization;
import Model.Organization.Organization;
import Model.Organization.PatientOrganization;
import Model.Donor.Donor;
import Model.Donor.Record;
import Model.Donor.RecordHistory;
import Model.UserAccount.UserAccount;
import Model.WorkQueue.DonorDoctorWorkRequest;
import Model.WorkQueue.PatientDoctorWorkRequest;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author divya
 */
public class ManageDonorRecordJPanel extends javax.swing.JPanel {
    private JPanel userProcessContainer;    
    private EcoSystem ecoSystem;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private DonorOrganization donorOrganization;
    private Donor donor;
    private RecordHistory recordHistory;
    //private PatientDirectory patientDirectory;
    /**
     * Creates new form ManageDonorRecordJPanel
     */
    public ManageDonorRecordJPanel(JPanel userProcessContainer,UserAccount userAccount, DonorOrganization donorOrganization, Enterprise enterprise,EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        this.donorOrganization = (DonorOrganization)donorOrganization;
        this.enterprise = enterprise;
        this.donor=userAccount.getDonor();
        this.recordHistory = donor.getRecordHistory();
        
        //this.patientDirectory = patientDirectory;
        populateTable();
    }
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) viewVitalSignsJTable.getModel();
        model.setRowCount(0);

        DoctorOrganization doctorOrganization=null;
        for(Organization o :enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(o instanceof DoctorOrganization){
                            DoctorOrganization dO =(DoctorOrganization)o;
                            doctorOrganization = dO;
                            break;
                        }
        }
    
    for (WorkRequest request : doctorOrganization.getWorkQueue().getWorkRequestList()) {
    if (request != null) {
        DonorDoctorWorkRequest donorDoctorWorkRequest = (DonorDoctorWorkRequest) request;
        Record r = donorDoctorWorkRequest.getRecord();
        if (r != null) { // Check if the Record object is not null
            Object[] row = new Object[7];                  
//            row[0] = r;       
//            row[1] = r.getBloodGroup();
//            row[2] = r.getOrganDonor();
//            row[3] = r.getMedicalHistory();
//            row[4] = r.getLastDonationDate();
////            row[5] = donorDoctorWorkRequest.getDoctorResponseMessage();
//            String respondStatus = donorDoctorWorkRequest.getRespondStatus();
//            row[6] = respondStatus == null ? "Waiting" : respondStatus;
               
            row[0] = r.getBloodGroup();
            row[1] = r.getOrganDonor();
            row[2] = r.getMedicalHistory();
            row[3] = r.getLastDonationDate();
//          row[5] = donorDoctorWorkRequest.getDoctorResponseMessage();
            String respondStatus = donorDoctorWorkRequest.getRespondStatus();
            row[4] = respondStatus == null ? "Waiting" : respondStatus;

            model.addRow(row);
        }
    }
} 
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewVitalSignsJTable = new javax.swing.JTable();
        addJButton = new javax.swing.JButton();
        viewJButton = new javax.swing.JButton();
        editJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        sendToMyDoctorJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        viewResponseJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 3, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 204));
        jLabel9.setText("Manage Donor Record");

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        viewVitalSignsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Group", "Organ Donor", "Medical History", "Last Donation Date", "Respond"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(viewVitalSignsJTable);

        addJButton.setText("Add Record");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        viewJButton.setText("View Details");
        viewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewJButtonActionPerformed(evt);
            }
        });

        editJButton.setText("Edit Record");
        editJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setText("Delete Record");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        sendToMyDoctorJButton.setText("Send To Doctor");
        sendToMyDoctorJButton.setMaximumSize(new java.awt.Dimension(131, 29));
        sendToMyDoctorJButton.setMinimumSize(new java.awt.Dimension(131, 29));
        sendToMyDoctorJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendToMyDoctorJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        viewResponseJButton.setText("View Response");
        viewResponseJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResponseJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(241, 241, 241)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(48, 48, 48)
                            .addComponent(addJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(viewJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(editJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(deleteJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(221, 221, 221)
                            .addComponent(viewResponseJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(34, 34, 34)
                            .addComponent(sendToMyDoctorJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(642, 642, 642)
                            .addComponent(refreshJButton))
                        .addComponent(backJButton))
                    .addContainerGap(18, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addJButton)
                    .addComponent(viewJButton)
                    .addComponent(editJButton)
                    .addComponent(deleteJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendToMyDoctorJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewResponseJButton))
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(refreshJButton)
                    .addGap(309, 309, 309)
                    .addComponent(backJButton)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
        // TODO add your handling code here:
        AddRecordJPanel panel = new AddRecordJPanel(userProcessContainer,userAccount,donorOrganization,enterprise,ecoSystem);
        userProcessContainer.add("AddRecordJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_addJButtonActionPerformed

    private void viewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = viewVitalSignsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        }else{

            Record vs = (Record) viewVitalSignsJTable.getValueAt(selectedRow, 0);
            ViewUpdateRecordDetailsJPanel panel = new ViewUpdateRecordDetailsJPanel(userProcessContainer,userAccount,donorOrganization,enterprise,ecoSystem,vs);
            userProcessContainer.add("ViewUpdateRecordDetailsJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        }

    }//GEN-LAST:event_viewJButtonActionPerformed

    private void sendToMyDoctorJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToMyDoctorJButtonActionPerformed
        //         TODO add your handling code here:
        int selectedRow = viewVitalSignsJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first to view detail", "Warning", JOptionPane.WARNING_MESSAGE);

        }else{

            UserAccount doctor = (UserAccount) donor.getMydoctor();
            DonorDoctorWorkRequest request = new DonorDoctorWorkRequest();
            request.setDoctor(doctor);
            request.setDonorName(userAccount.getName());
            request.setDate();

        // Retrieve the Donor's associated Record
        Record donorRecord = donor.getRecordHistory().getRecordList().get(selectedRow); // Assuming selectedRow corresponds to the record
        
        // Populate the request with the donor's health details (Medical History, Blood Group, etc.)
        request.setRecord(donorRecord);
        
        // Set other relevant data from the record
        String medicalHistory = donorRecord.getMedicalHistory();
        String bloodGroup = donorRecord.getBloodGroup();
        String organDonor = donorRecord.getOrganDonor();
        Date lastDonationDate = donorRecord.getLastDonationDate();
        
        // Set the request status based on available information, you can also set this dynamically if needed
        String requestStatus = "Pending";  // Default status (you can set this dynamically if needed)
        
        // Set the donor's medical history and blood group into the request
        request.setDoctorResponseMessage("Medical History: " + medicalHistory + ", Blood Group: " + bloodGroup + ", Organ Donor: " + organDonor);
        request.setRequestStatus(requestStatus); // Set status (e.g., "Pending" or others)
        
    

            Organization org = null;
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof DoctorOrganization) {
                    org = organization;
                    break;
                }
            }

            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                doctor.getWorkQueue().getWorkRequestList().add(request);
                JOptionPane.showMessageDialog(null, "Success! ");
            }

        }
    }//GEN-LAST:event_sendToMyDoctorJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewResponseJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResponseJButtonActionPerformed
        // TODO add your handling code here:
        DoctorRespondJPanel doctorRespondJPanel = new DoctorRespondJPanel(userProcessContainer, userAccount, donorOrganization, enterprise, ecoSystem);

        // Add the panel to userProcessContainer
        userProcessContainer.add("DoctorRespondJPanel", doctorRespondJPanel);

        // Configure the layout to display the new panel
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewResponseJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = viewVitalSignsJTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Donor selectedDonor = (Donor) viewVitalSignsJTable.getValueAt(selectedRowIndex, 0);
//        donorCatalog.removeDonor(selectedDonor);

    // Refresh the table to reflect the changes

    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void editJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JButton editJButton;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton sendToMyDoctorJButton;
    private javax.swing.JButton viewJButton;
    private javax.swing.JButton viewResponseJButton;
    private javax.swing.JTable viewVitalSignsJTable;
    // End of variables declaration//GEN-END:variables
}